; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html
[platformio]
default_envs = nano


[common]
build_flags =
	-D VERSION=1.0.0
	-std=gnu++17
build_unflags =
    -std=gnu++11
; Board defaults
board_build.mcu = atmega328p
board_build.f_cpu = 16000000L
; Library defaults
lib_deps_builtin =
	SPI
	Wire
	SoftwareSerial
	HID
lib_deps_external =
	marcoschwartz/LiquidCrystal_I2C@^1.1.2
	robtillaart/RunningAverage@^0.4.6
	arkhipenko/TaskScheduler@^3.8.5

;	ArduinoFake
;	paulstoffregen/Encoder@^1.4.4
test_ignore =
	test_common

[env:nano]
; board = 328p16m
platform = atmelavr
board = nanoatmega328new
framework = arduino

upload_protocol = arduino
upload_resetmethod = 
; Debug options
; build_type = debug 
debug_tool = avr-stub
debug_port = \\.\COM4
debug_build_flags =
	-Og 
	-g2  
	-D DEBUG=1
  	-D AVR8_BREAKPOINT_MODE=2 ; FLASH breakpoints with Optiboot bootloader (using do_spm() function)
	-D AVR8_SWINT_SOURCE=1 ; use INT1 (pin PD3, Arduino pin 3)
	${common.build_flags}

; Library options
lib_deps =
	${common.lib_deps_builtin}
	${common.lib_deps_external}
    jdolinay/avr-debugger @ ~1.4

; Build options
build_flags =
	${common.build_flags}
build_unflags =
	${common.build_unflags}

; Serial Monitor options
monitor_speed = 115200

; Unit Testing options
test_framework = unity
test_ignore =
	${common.test_ignore}
	test_desktop


[env:loader]
upload_protocol = usbasp
board = nanoatmega328new

; platform_packages =
; 	platformio/tool-simavr
; test_speed = 9600
; test_testing_command =
; 	${platformio.packages_dir}/tool-simavr/bin/simavr
; 	-m
; 	${common.board_build.mcu}
; 	-f
; 	${common.board_build.f_cpu}
; 	${platformio.build_dir}/${this.__env__}/firmware.elf

; [env:native]
; platform = native

; ; Build options
; build_flags =
; 	${common.build_flags}
; 	-std=gnu++11

; ; Library options
; lib_deps =
; 	${common.lib_deps_external}


; ; Unit Testing options
; test_framework = unity
; test_ignore =
; 	${common.test_ignore}
; 	test_embedded